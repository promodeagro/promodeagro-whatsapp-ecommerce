

service: promodeagro-whatsapp-ecommerce
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  stage: dev
  role: arn:aws:iam::851725323791:role/ecommerce_Lambda_Role
  region: us-east-1
  timeout: 360
  runtime: nodejs18.x

  

# you can overwrite defaults here

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  # createProduct:
  - ${file(webhooks/function.yml)}
  - ${file(razorpay/function.yml)}
  # - ${file(inventory/function.yml)}
  # - ${file(Products/function.yml)}
  # # #    The following are a few example events you can configure

  # - ${file(OrderBills/function.yml)}
  # - ${file(Users/function.yml)}
  # - ${file(Login/function.yml)}
  # - ${file(Customer/function.yml)}
  # - ${file(webhooks/function.yml)}


plugins:
  - serverless-offline
